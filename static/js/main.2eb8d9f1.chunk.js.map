{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","value","convertedValue","snackbarClassname","onChange","bind","navigator","clipboard","readText","e","target","replace","this","setState","onCopy","showSnackbar","text","writeText","nameInput","focus","setTimeout","className","id","type","ref","input","onClick","onPaste","readOnly","onCopyButtonClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"wSAgGeA,G,kBA5Fb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXC,MAAO,GACPC,eAAgB,GAChBC,kBAAmB,IAGrB,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBATC,E,gMAaJC,UAAUC,UAAUC,W,sKAG1BC,GACP,IAAMR,EAAQQ,EAAEC,OAAOT,MACjBC,EAAiBD,EAAMU,QAAQ,KAAM,IAE3CC,KAAKC,SAAS,CACZZ,QACAC,qB,gKAKkBU,KAAKJ,W,OAAnBP,E,OACAC,EAAiBD,EAAMU,QAAQ,KAAM,IAC3CC,KAAKE,OAAOZ,GACZU,KAAKG,eAELH,KAAKR,SAAS,CAAEM,OAAQ,CAAET,W,iIAGrBe,GACLV,UAAUC,UAAUU,UAAUD,K,0CAI9BJ,KAAKM,UAAUC,U,0CAGI,IACXjB,EAAmBU,KAAKZ,MAAxBE,eACRU,KAAKE,OAAOZ,GACZU,KAAKG,iB,qCAGS,IAAD,OACbH,KAAKC,SAAS,CACZV,kBAAmB,SAGrBiB,WAAW,WACT,EAAKP,SAAS,CACZV,kBAAmB,MAEpB,Q,+BAGK,IAAD,SAC8CS,KAAKZ,MAAlDC,EADD,EACCA,MAAOC,EADR,EACQA,eAAgBC,EADxB,EACwBA,kBAE/B,OACE,yBAAKkB,UAAU,OACb,iHACA,6BACE,oEACA,2BAAOC,GAAG,SACRC,KAAK,OACLtB,MAAQA,EACRuB,IAAM,SAACC,GAAW,EAAKP,UAAYO,GACnCrB,SAAWQ,KAAKR,WAClB,4BAAQsB,QAAUd,KAAKe,QAAQtB,KAAKO,OAApC,6BAEF,6BACE,0EACA,2BAAOU,GAAG,SACRC,KAAK,OACLtB,MAAQC,EACR0B,UAAW,IACb,4BAAQF,QAAUd,KAAKiB,kBAAkBxB,KAAKO,OAA9C,6BAEF,yBAAKU,GAAG,WAAWD,UAAYlB,GAA/B,6G,GArFU2B,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBjC,WACrBA,UAAUkC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.2eb8d9f1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: '',\n      convertedValue: '',\n      snackbarClassname: '',\n    }\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  async readText() {\n    return await navigator.clipboard.readText();\n  }\n\n  onChange(e) {\n    const value = e.target.value;\n    const convertedValue = value.replace(/-/g, '');\n\n    this.setState({\n      value,\n      convertedValue,\n    });\n  }\n\n  async onPaste() {\n    const value = await this.readText();\n    const convertedValue = value.replace(/-/g, '');\n    this.onCopy(convertedValue);\n    this.showSnackbar();\n\n    this.onChange({ target: { value } });\n  }\n\n  onCopy(text) {\n    navigator.clipboard.writeText(text);\n  }\n\n  componentDidMount() {\n    this.nameInput.focus();\n  }\n\n  onCopyButtonClick() {\n    const { convertedValue } = this.state;\n    this.onCopy(convertedValue);\n    this.showSnackbar();\n  }\n\n  showSnackbar() {\n    this.setState({\n      snackbarClassname: 'show',\n    });\n\n    setTimeout(() => {\n      this.setState({\n        snackbarClassname: '',\n      })\n    }, 1500);\n  }\n  \n  render() {\n    const { value, convertedValue, snackbarClassname } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h3> 카트라이더 쿠폰코드 변환하기</h3>\n        <div>\n          <p>쿠폰코드 입력</p>\n          <input id='input1'\n            type=\"text\"\n            value={ value }\n            ref={ (input) =>{ this.nameInput = input }}\n            onChange={ this.onChange } ></input>\n          <button onClick={ this.onPaste.bind(this) } >붙여넣기</button>\n        </div>\n        <div>\n          <p>변환된 쿠폰코드</p>\n          <input id='input2'\n            type=\"text\"\n            value={ convertedValue }\n            readOnly={ true } />\n          <button onClick={ this.onCopyButtonClick.bind(this) }>복사하기</button>\n        </div>\n        <div id=\"snackbar\" className={ snackbarClassname }>\n          클립보드로 변환된 쿠폰코드 복사완료!\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}